/* Copyright (C) 2010 Eric Parsonage */
/* Automatically Generated by gencode.m */
/* Purpose: a collection of functions that output paparazzi messages in human readable form */
void HANDLER_ACINFO(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "ACINFO");
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("course = %d decideg\n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("utm_east = %d cm\n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("utm_north = %d cm\n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("alt = %d cm\n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("itow = %u ms\n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("speed = %u cm/s\n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("climb = %d cm/s\n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ac_id = %u \n", tmp);
  }
}

void HANDLER_MOVE_WP(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "MOVE_WP");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("wp_id = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ac_id = %u \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("lat = %d e-7deg\n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("lon = %d e-7deg\n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("alt = %d cm\n", tmp);
  }
}

void HANDLER_WIND_INFO(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "WIND_INFO");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ac_id = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("pad0 = %u \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("east = %f m/s\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("north = %f m/s\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("airspeed = %f m/s\n", tmp);
  }
}

void HANDLER_SETTING(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "SETTING");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("index = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ac_id = %u \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("value = %f \n", tmp);
  }
}

void HANDLER_BLOCK(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BLOCK");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("block_id = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ac_id = %u \n", tmp);
  }
}

void HANDLER_HITL_UBX(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "HITL_UBX");
/* this message contains a variable length array */
}

void HANDLER_HITL_INFRARED(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "HITL_INFRARED");
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("roll = %d \n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("pitch = %d \n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("top = %d \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ac_id = %u \n", tmp);
  }
}

void HANDLER_PING(unsigned char * data, unsigned char len)
{
  printf("MESSAGE = %s\n", "PING");
}

void HANDLER_FORMATION_SLOT(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "FORMATION_SLOT");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ac_id = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("mode = %u \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("slot_east = %f m\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("slot_north = %f m\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("slot_alt = %f m\n", tmp);
  }
}

void HANDLER_FORMATION_STATUS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "FORMATION_STATUS");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ac_id = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("leader_id = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("status = %u \n", tmp);
  }
}

void HANDLER_JOYSTICK_RAW(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "JOYSTICK_RAW");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ac_id = %u \n", tmp);
  }
  {
     char tmp;
     memcpy(&tmp, data + offset, sizeof(char));
     offset += sizeof(char);
     printf("roll = %d \n", tmp);
  }
  {
     char tmp;
     memcpy(&tmp, data + offset, sizeof(char));
     offset += sizeof(char);
     printf("pitch = %d \n", tmp);
  }
  {
     char tmp;
     memcpy(&tmp, data + offset, sizeof(char));
     offset += sizeof(char);
     printf("throttle = %d \n", tmp);
  }
}

void HANDLER_COMMANDS_RAW(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "COMMANDS_RAW");
/* this message contains a variable length array */
}

void HANDLER_DGPS_RAW(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "DGPS_RAW");
/* this message contains a variable length array */
}

void HANDLER_GET_SETTING(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "GET_SETTING");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("index = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ac_id = %u \n", tmp);
  }
}

void HANDLER_TCAS_RESOLVE(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "TCAS_RESOLVE");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ac_id = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ac_id_conflict = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("resolve = %u \n", tmp);
  }
}

void HANDLER_WINDTURBINE_STATUS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "WINDTURBINE_STATUS");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ac_id = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("tb_id = %u \n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("sync_itow = %u ms\n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("cycle_time = %u ms\n", tmp);
  }
}

void HANDLER_RC_3CH(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "RC_3CH");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("throttle_mode = %u byte_mask\n", tmp);
  }
  {
     char tmp;
     memcpy(&tmp, data + offset, sizeof(char));
     offset += sizeof(char);
     printf("roll = %d \n", tmp);
  }
  {
     char tmp;
     memcpy(&tmp, data + offset, sizeof(char));
     offset += sizeof(char);
     printf("pitch = %d \n", tmp);
  }
}

void HANDLER_RC_4CH(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "RC_4CH");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ac_id = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("mode = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("throttle = %u \n", tmp);
  }
  {
     char tmp;
     memcpy(&tmp, data + offset, sizeof(char));
     offset += sizeof(char);
     printf("roll = %d \n", tmp);
  }
  {
     char tmp;
     memcpy(&tmp, data + offset, sizeof(char));
     offset += sizeof(char);
     printf("pitch = %d \n", tmp);
  }
  {
     char tmp;
     memcpy(&tmp, data + offset, sizeof(char));
     offset += sizeof(char);
     printf("yaw = %d \n", tmp);
  }
}

void HANDLER_KITE_COMMAND(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "KITE_COMMAND");
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("POWER = %u \n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("TURN = %u \n", tmp);
  }
}

void HANDLER_PAYLOAD_COMMAND(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "PAYLOAD_COMMAND");
/* this message contains a variable length array */
}

void HANDLER_SET_ACTUATOR(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "SET_ACTUATOR");
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("value = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("no = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ac_id = %u \n", tmp);
  }
}

void HANDLER_CSC_SERVO_CMD(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "CSC_SERVO_CMD");
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("servo_1 = %u \n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("servo_2 = %u \n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("servo_3 = %u \n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("servo_4 = %u \n", tmp);
  }
}

void HANDLER_BOOZ2_FMS_COMMAND(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BOOZ2_FMS_COMMAND");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("h_mode = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("v_mode = %u \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("v_sp = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("h_sp_1 = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("h_sp_2 = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("h_sp_3 = %d \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ac_id = %u \n", tmp);
  }
}

void HANDLER_BOOZ_NAV_STICK(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BOOZ_NAV_STICK");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ac_id = %u \n", tmp);
  }
  {
     char tmp;
     memcpy(&tmp, data + offset, sizeof(char));
     offset += sizeof(char);
     printf("vx_sp = %d \n", tmp);
  }
  {
     char tmp;
     memcpy(&tmp, data + offset, sizeof(char));
     offset += sizeof(char);
     printf("vy_sp = %d \n", tmp);
  }
  {
     char tmp;
     memcpy(&tmp, data + offset, sizeof(char));
     offset += sizeof(char);
     printf("vz_sp = %d \n", tmp);
  }
  {
     char tmp;
     memcpy(&tmp, data + offset, sizeof(char));
     offset += sizeof(char);
     printf("r_sp = %d \n", tmp);
  }
}

void HANDLER_EXTERNAL_FILTER_SOLUTION(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "EXTERNAL_FILTER_SOLUTION");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ac_id = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("status = %u \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("x = %f m\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("xd = %f m\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("y = %f m\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("yd = %f m\n", tmp);
  }
}

void HANDLER_BOOZ_CAM_STICK(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BOOZ_CAM_STICK");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ac_id = %u \n", tmp);
  }
  {
     char tmp;
     memcpy(&tmp, data + offset, sizeof(char));
     offset += sizeof(char);
     printf("tilt = %d \n", tmp);
  }
  {
     char tmp;
     memcpy(&tmp, data + offset, sizeof(char));
     offset += sizeof(char);
     printf("pan = %d \n", tmp);
  }
}

typedef void (*ptrHandler)(unsigned char *, unsigned char len);
ptrHandler funcArray[256] = {
HANDLER_DEFAULT,
HANDLER_ACINFO,
HANDLER_MOVE_WP,
HANDLER_WIND_INFO,
HANDLER_SETTING,
HANDLER_BLOCK,
HANDLER_HITL_UBX,
HANDLER_HITL_INFRARED,
HANDLER_PING,
HANDLER_FORMATION_SLOT,
HANDLER_FORMATION_STATUS,
HANDLER_JOYSTICK_RAW,
HANDLER_COMMANDS_RAW,
HANDLER_DGPS_RAW,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_GET_SETTING,
HANDLER_TCAS_RESOLVE,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_WINDTURBINE_STATUS,
HANDLER_RC_3CH,
HANDLER_RC_4CH,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_KITE_COMMAND,
HANDLER_PAYLOAD_COMMAND,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_SET_ACTUATOR,
HANDLER_CSC_SERVO_CMD,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_BOOZ2_FMS_COMMAND,
HANDLER_BOOZ_NAV_STICK,
HANDLER_EXTERNAL_FILTER_SOLUTION,
HANDLER_BOOZ_CAM_STICK,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT
};
