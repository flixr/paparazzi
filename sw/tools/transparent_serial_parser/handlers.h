/* Copyright (C) 2010 Eric Parsonage */
/* Automatically Generated by gencode.m */
/* Purpose: a collection of functions that output paparazzi messages in human readable form */
void HANDLER_BOOT(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BOOT");
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("version = %u \n", tmp);
  }
}

void HANDLER_ALIVE(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "ALIVE");
/* this message contains a variable length array */
}

void HANDLER_PONG(unsigned char * data, unsigned char len)
{
  printf("MESSAGE = %s\n", "PONG");
}

void HANDLER_TAKEOFF(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "TAKEOFF");
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("cpu_time = %u s\n", tmp);
  }
}

void HANDLER_DebugChao(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "DebugChao");
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("int16_1 = %d deg\n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("int16_2 = %d deg\n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("int16_3 = %d deg\n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("int32_1 = %d deg\n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("int32_2 = %d deg\n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("int32_3 = %d deg\n", tmp);
  }
}

void HANDLER_ATTITUDE(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "ATTITUDE");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("phi = (%f rad) %lf deg\n", tmp,(double)(tmp*57.3));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("psi = (%f rad) %lf deg\n", tmp,(double)(tmp*57.3));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("theta = (%f rad) %lf deg\n", tmp,(double)(tmp*57.3));
  }
}

void HANDLER_IR_SENSORS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "IR_SENSORS");
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("ir1 = %d \n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("ir2 = %d \n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("longitudinal = %d \n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("lateral = %d \n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("vertical = %d \n", tmp);
  }
}

void HANDLER_GPS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "GPS");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("mode = %u byte_mask\n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("utm_east = (%d cm) %lf m\n", tmp,(double)(tmp*0.01));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("utm_north = (%d cm) %lf m\n", tmp,(double)(tmp*0.01));
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("course = (%d decideg) %lf deg\n", tmp,(double)(tmp*0.1));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("alt = (%d cm) %lf m\n", tmp,(double)(tmp*0.01));
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("speed = (%u cm/s) %lf m/s\n", tmp,(double)(tmp*0.01));
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("climb = (%d cm/s) %lf m/s\n", tmp,(double)(tmp*0.01));
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("week = %u weeks\n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("itow = %u ms\n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("utm_zone = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("gps_nb_err = %u \n", tmp);
  }
}

void HANDLER_NAVIGATION_REF(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "NAVIGATION_REF");
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("utm_east = %d m\n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("utm_north = %d m\n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("utm_zone = %u \n", tmp);
  }
}

void HANDLER_NAVIGATION(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "NAVIGATION");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("cur_block = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("cur_stage = %u \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("pos_x = %f m\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("pos_y = %f m\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("dist2_wp = %f m^2\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("dist2_home = %f m^2\n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("circle_count = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("oval_count = %u \n", tmp);
  }
}

void HANDLER_PPRZ_MODE(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "PPRZ_MODE");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ap_mode = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ap_gaz = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ap_lateral = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ap_horizontal = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("if_calib_mode = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("mcu1_status = %u \n", tmp);
  }
}

void HANDLER_BAT(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BAT");
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("throttle = %d pprz\n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("voltage = (%u 1e-1V) %lf V\n", tmp,(double)(tmp*0.1));
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("amps = %d A\n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("flight_time = %u s\n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("kill_auto_throttle = %u bool\n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("block_time = %u s\n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("stage_time = %u s\n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("energy = %d mAh\n", tmp);
  }
}

void HANDLER_DEBUG_MCU_LINK(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "DEBUG_MCU_LINK");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("i2c_nb_err = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("i2c_mcu1_nb_err = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ppm_rate = %u \n", tmp);
  }
}

void HANDLER_CALIBRATION(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "CALIBRATION");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("climb_sum_err = %f \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("climb_gaz_submode = %u \n", tmp);
  }
}

void HANDLER_SETTINGS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "SETTINGS");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("slider_1_val = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("slider_2_val = %f \n", tmp);
  }
}

void HANDLER_DESIRED(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "DESIRED");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("roll = (%f rad) %lf deg\n", tmp,(double)(tmp*57.3));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("pitch = (%f rad) %lf deg\n", tmp,(double)(tmp*57.3));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("course = (%f rad) %lf deg\n", tmp,(double)(tmp*57.3));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("x = %f m\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("y = %f m\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("altitude = %f m\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("climb = %f m/s\n", tmp);
  }
}

void HANDLER_GPS_SOL(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "GPS_SOL");
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("Pacc = %u cm\n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("Sacc = %u cm/s\n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("PDOP = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("numSV = %u \n", tmp);
  }
}

void HANDLER_ADC_GENERIC(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "ADC_GENERIC");
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("val1 = %u \n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("val2 = %u \n", tmp);
  }
}

void HANDLER_TEST_FORMAT(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "TEST_FORMAT");
  {
     double tmp;
     memcpy(&tmp, data + offset, sizeof(double));
     offset += sizeof(double);
     printf("val1 = %lf \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("val2 = %f \n", tmp);
  }
}

void HANDLER_CAM(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "CAM");
  {
     char tmp;
     memcpy(&tmp, data + offset, sizeof(char));
     offset += sizeof(char);
     printf("phi = %d deg\n", tmp);
  }
  {
     char tmp;
     memcpy(&tmp, data + offset, sizeof(char));
     offset += sizeof(char);
     printf("theta = %d deg\n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("target_x = %d m\n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("target_y = %d m\n", tmp);
  }
}

void HANDLER_CIRCLE(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "CIRCLE");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("center_east = %f m\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("center_north = %f m\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("radius = %f m\n", tmp);
  }
}

void HANDLER_SEGMENT(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "SEGMENT");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("segment_east_1 = %f m\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("segment_north_1 = %f m\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("segment_east_2 = %f m\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("segment_north_2 = %f m\n", tmp);
  }
}

void HANDLER_DOWNLINK_STATUS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "DOWNLINK_STATUS");
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("run_time = %u s\n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("rx_bytes = %u \n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("rx_msgs = %u \n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("rx_err = %u \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("rx_bytes_rate = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("rx_msgs_rate = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ping_time = %f ms\n", tmp);
  }
}

void HANDLER_MODEM_STATUS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "MODEM_STATUS");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("detected = %u \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("valim = %f \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("cd = %u \n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("nb_byte = %u \n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("nb_msg = %u \n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("nb_err = %u \n", tmp);
  }
}

void HANDLER_SVINFO(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "SVINFO");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("chn = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("SVID = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("Flags = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("QI = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("CNO = %u dbHz\n", tmp);
  }
  {
     char tmp;
     memcpy(&tmp, data + offset, sizeof(char));
     offset += sizeof(char);
     printf("Elev = %d deg\n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("Azim = %d deg\n", tmp);
  }
}

void HANDLER_DEBUG(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "DEBUG");
/* this message contains a variable length array */
}

void HANDLER_SURVEY(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "SURVEY");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("east = %f m\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("north = %f m\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("west = %f m\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("south = %f m\n", tmp);
  }
}

void HANDLER_WC_RSSI(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "WC_RSSI");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("raw_level = %u \n", tmp);
  }
}

void HANDLER_RANGEFINDER(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "RANGEFINDER");
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("range = %u cm\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("z_dot = %f m/s\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("z_dot_sum_err = %f m/s\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("z_dot_setpoint = %f m/s\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("z_sum_err = %f m/s\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("z_setpoint = %f m\n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("flying = %u bool\n", tmp);
  }
}

void HANDLER_DOWNLINK(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "DOWNLINK");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("nb_ovrn = %u \n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("rate = %u bytes/s\n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("nb_msgs = %u \n", tmp);
  }
}

void HANDLER_DL_VALUE(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "DL_VALUE");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("index = %u \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("value = %f \n", tmp);
  }
}

void HANDLER_MARK(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "MARK");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ac_id = %u \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("lat = %f deg\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("long = %f deg\n", tmp);
  }
}

void HANDLER_SYS_MON(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "SYS_MON");
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("periodic_time = (%u usec) %lf msec\n", tmp,(double)(tmp*0.001));
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("periodic_cycle = (%u usec) %lf msec\n", tmp,(double)(tmp*0.001));
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("periodic_cycle_min = (%u usec) %lf msec\n", tmp,(double)(tmp*0.001));
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("periodic_cycle_max = (%u usec) %lf msec\n", tmp,(double)(tmp*0.001));
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("event_number = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("cpu_load = %u %\n", tmp);
  }
}

void HANDLER_MOTOR(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "MOTOR");
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("rpm = %u Hz\n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("current = %d mA\n", tmp);
  }
}

void HANDLER_WP_MOVED(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "WP_MOVED");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("wp_id = %u \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("utm_east = %f m\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("utm_north = %f m\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("alt = %f m\n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("utm_zone = %u \n", tmp);
  }
}

void HANDLER_GYRO_RATES(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "GYRO_RATES");
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("roll_adc = %d \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("roll = %f rad/s\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("pitch = %f rad/s\n", tmp);
  }
}

void HANDLER_ENERGY(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "ENERGY");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("bat = %f V\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("amp = %f A\n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("energy = %u mAh\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("power = %f W\n", tmp);
  }
}

void HANDLER_BARO_BMP85_CALIB(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BARO_BMP85_CALIB");
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("a1 = %d \n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("a2 = %d \n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("a3 = %d \n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("a4 = %u \n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("a5 = %u \n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("a6 = %u \n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("b1 = %d \n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("b2 = %d \n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("mb = %d \n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("mc = %d \n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("md = %d \n", tmp);
  }
}

void HANDLER_BARO_BMP85(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BARO_BMP85");
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("UT = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("UP = %d \n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("P = %u \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("T = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("MSL = %f \n", tmp);
  }
}

void HANDLER_SPEED_LOOP(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "SPEED_LOOP");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ve_set_point = %f m/s\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ve = %f m/s\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("vn_set_point = %f m/s\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("vn = %f m/s\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("north_sp = %f rad\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("east_sp = %f rad\n", tmp);
  }
}

void HANDLER_ALT_KALMAN(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "ALT_KALMAN");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("p00 = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("p01 = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("p10 = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("p11 = %f \n", tmp);
  }
}

void HANDLER_ESTIMATOR(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "ESTIMATOR");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("z = %f m\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("z_dot = %f m/s\n", tmp);
  }
}

void HANDLER_TUNE_ROLL(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "TUNE_ROLL");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("p = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("phi = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("phi_sp = %f \n", tmp);
  }
}

void HANDLER_BARO_MS5534A(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BARO_MS5534A");
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("pressure = %u P\n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("temp = %u dC\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("alt = %f m\n", tmp);
  }
}

void HANDLER_PRESSURE(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "PRESSURE");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("airspeed_adc = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("airspeed = %f m/s\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("altitude_adc = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("altitude = %f m\n", tmp);
  }
}

void HANDLER_BARO_WORDS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BARO_WORDS");
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("w1 = %u \n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("w2 = %u \n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("w3 = %u \n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("w4 = %u \n", tmp);
  }
}

void HANDLER_WP_MOVED_LLA(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "WP_MOVED_LLA");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("wp_id = %u \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("lat = %d degres\n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("lon = %d degres\n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("alt = %d cm\n", tmp);
  }
}

void HANDLER_CHRONO(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "CHRONO");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("tag = %u \n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("time = %u us\n", tmp);
  }
}

void HANDLER_WP_MOVED_ENU(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "WP_MOVED_ENU");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("wp_id = %u \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("east = (%d 2^8m) %lf m\n", tmp,(double)(tmp*0.0039063));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("north = (%d 2^8m) %lf m\n", tmp,(double)(tmp*0.0039063));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("up = (%d 2^8m) %lf m\n", tmp,(double)(tmp*0.0039063));
  }
}

void HANDLER_WINDTURBINE_STATUS_(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "WINDTURBINE_STATUS_");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ac_id = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("tb_id = %u \n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("sync_itow = %u ms\n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("cycle_time = %u ms\n", tmp);
  }
}

void HANDLER_RC_3CH_(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "RC_3CH_");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("throttle_mode = %u byte_mask\n", tmp);
  }
  {
     char tmp;
     memcpy(&tmp, data + offset, sizeof(char));
     offset += sizeof(char);
     printf("roll = %d \n", tmp);
  }
  {
     char tmp;
     memcpy(&tmp, data + offset, sizeof(char));
     offset += sizeof(char);
     printf("pitch = %d \n", tmp);
  }
}

void HANDLER_MPPT(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "MPPT");
/* this message contains a variable length array */
}

void HANDLER_DEBUG_IR_I2C(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "DEBUG_IR_I2C");
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("ir1 = %d adc\n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("ir2 = %d adc\n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("top = %d adc\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("phi = (%f rad) %lf deg\n", tmp,(double)(tmp*57.3));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("theta = (%f rad) %lf deg\n", tmp,(double)(tmp*57.3));
  }
}

void HANDLER_AIRSPEED(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "AIRSPEED");
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("adc = %u \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("airspeed = %f m/s\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("airspeed_sp = %f m/s\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("airspeed_cnt = %f m/s\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("groundspeed_sp = %f m/s\n", tmp);
  }
}

void HANDLER_XSENS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "XSENS");
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("counter = %d \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("p = %f deg/s\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("q = %f deg/s\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("r = %f deg/s\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("phi = %f deg\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("theta = %f deg\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("psi = %f deg\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ax = %f m/s2\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ay = %f m/s2\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("az = %f m/s2\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("vx = %f m/s\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("vy = %f m/s\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("vz = %f m/s\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("lat = %f deg\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("lon = %f deg\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("alt = %f m\n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("status = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("hour = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("min = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("sec = %u \n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("nanosec = %u \n", tmp);
  }
}

void HANDLER_BARO_ETS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BARO_ETS");
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("adc = %u \n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("offset = %u \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("scaled = %f \n", tmp);
  }
}

void HANDLER_AIRSPEED_ETS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "AIRSPEED_ETS");
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("adc = %u \n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("offset = %u \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("scaled = %f \n", tmp);
  }
}

void HANDLER_H_CTL_A(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "H_CTL_A");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("roll_sum_err = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ref_roll_angle = (%f rad) %lf deg\n", tmp,(double)(tmp*57.3));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("pitch_sum_err = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ref_pitch_angle = (%f rad) %lf deg\n", tmp,(double)(tmp*57.3));
  }
}

void HANDLER_TURB_PRESSURE_RAW(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "TURB_PRESSURE_RAW");
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ch_0 = %d adc\n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ch_1 = %d adc\n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ch_2 = %d adc\n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ch_3 = %d adc\n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ch_4 = %d adc\n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ch_5 = %d adc\n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ch_6 = %d adc\n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ch_7 = %d adc\n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ch_8 = %d adc\n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ch_9 = %d adc\n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ch_10 = %d adc\n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ch_11 = %d adc\n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ch_12 = %d adc\n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ch_13 = %d adc\n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ch_14 = %d adc\n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ch_15 = %d adc\n", tmp);
  }
}

void HANDLER_TURB_PRESSURE_VOLTAGE(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "TURB_PRESSURE_VOLTAGE");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ch_1_p = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ch_1_t = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ch_2_p = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ch_2_t = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ch_3_p = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ch_3_t = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ch_4_p = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ch_4_t = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ch_5_p = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ch_5_t = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ch_6_p = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ch_6_t = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ch_7_p = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ch_7_t = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("gnd1 = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("gnd2 = %f \n", tmp);
  }
}

void HANDLER_VF_UPDATE(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "VF_UPDATE");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("baro = %f m\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("range_meter = %f m\n", tmp);
  }
}

void HANDLER_VF_PREDICT(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "VF_PREDICT");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("accel = %f m/s/s\n", tmp);
  }
}

void HANDLER_CROSS_TRACK_ERROR(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "CROSS_TRACK_ERROR");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("cross_track_error = %f m\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("cte_int = %f \n", tmp);
  }
}

void HANDLER_ESTIMATOR_COMP_FILTER(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "ESTIMATOR_COMP_FILTER");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("gyro_hp_last_out = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("gyro_int = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("gps_lp_last_out = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ir_lp_last_out = %f \n", tmp);
  }
}

void HANDLER_FORMATION_SLOT_TM(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "FORMATION_SLOT_TM");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ac_id = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("mode = %u \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("slot_east = %f m\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("slot_north = %f m\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("slot_alt = %f m\n", tmp);
  }
}

void HANDLER_FORMATION_STATUS_TM(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "FORMATION_STATUS_TM");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ac_id = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("leader_id = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("status = %u \n", tmp);
  }
}

void HANDLER_WIND_INFO_RET(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "WIND_INFO_RET");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("east = %f m/s\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("north = %f m/s\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("airspeed = %f m/s\n", tmp);
  }
}

void HANDLER_SCP_STATUS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "SCP_STATUS");
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("press = %u Pa\n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("temp = %d 100x_deg_celsius\n", tmp);
  }
}

void HANDLER_SHT_STATUS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "SHT_STATUS");
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("ihumid = %u \n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("itemp = %u \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("humid = %f rel_hum\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("temp = %f deg_celsius\n", tmp);
  }
}

void HANDLER_ENOSE_STATUS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "ENOSE_STATUS");
/* this message contains a variable length array */
}

void HANDLER_DPICCO_STATUS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "DPICCO_STATUS");
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("humid = %u \n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("temp = %u \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("fhumid = %f rel_hum\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ftemp = %f deg_celsius\n", tmp);
  }
}

void HANDLER_ANTENNA_DEBUG(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "ANTENNA_DEBUG");
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("mag_xraw = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("mag_yraw = %d \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("mag_xcal = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("mag_ycal = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("mag_heading = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("mag_magnitude = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("mag_temp = %f \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("mag_distor = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("mag_cal_status = %u \n", tmp);
  }
}

void HANDLER_ANTENNA_STATUS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "ANTENNA_STATUS");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("azim_sp = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("elev_sp = %f \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("id_sp = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("mode = %u \n", tmp);
  }
}

void HANDLER_MOTOR_BENCH_STATUS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "MOTOR_BENCH_STATUS");
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("time_ticks = %u \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("throttle = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("rpm = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("current = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("thrust = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("torque = %f \n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("time_s = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("mode = %u \n", tmp);
  }
}

void HANDLER_MOTOR_BENCH_STATIC(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "MOTOR_BENCH_STATIC");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("av_rpm = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("av_thrust = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("av_current = %f \n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("throttle = %u \n", tmp);
  }
}

void HANDLER_PPM(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "PPM");
/* this message contains a variable length array */
}

void HANDLER_RC(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "RC");
/* this message contains a variable length array */
}

void HANDLER_COMMANDS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "COMMANDS");
/* this message contains a variable length array */
}

void HANDLER_FBW_STATUS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "FBW_STATUS");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("rc_status = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("mode = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("vsupply = %u decivolt\n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("current = %d mA\n", tmp);
  }
}

void HANDLER_ADC(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "ADC");
/* this message contains a variable length array */
}

void HANDLER_ACTUATORS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "ACTUATORS");
/* this message contains a variable length array */
}

void HANDLER_BETH(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BETH");
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("azimuth = %d \n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("elevation = %d \n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("tilt = %d \n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("counter = %u \n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("can_errs = %u \n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("spi_errs = %u \n", tmp);
  }
  {
     char tmp;
     memcpy(&tmp, data + offset, sizeof(char));
     offset += sizeof(char);
     printf("thrust_out = %d \n", tmp);
  }
  {
     char tmp;
     memcpy(&tmp, data + offset, sizeof(char));
     offset += sizeof(char);
     printf("pitch_out = %d \n", tmp);
  }
}

void HANDLER_BETH_ESTIMATOR(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BETH_ESTIMATOR");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("tilt = (%f) %lf deg\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("tilt_dot = (%f) %lf deg/s\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("elevation = (%f) %lf deg\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("elevation_dot = (%f) %lf deg/s\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("azimuth = (%f) %lf deg\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("azimuth_dot = (%f) %lf deg/s\n", tmp,(double)(tmp*57.2958));
  }
}

void HANDLER_BETH_CONTROLLER(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BETH_CONTROLLER");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("pitch = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("thrust = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("pitch_ff = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("pitch_fb = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("thrust_ff = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("thrust_fb = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("tilt_sp = (%f) %lf deg\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("tilt_ref = (%f) %lf deg\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("tilt_dot_ref = (%f) %lf deg/s\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("elevation_sp  = (%f) %lf deg\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("elevation_ref  = (%f) %lf deg\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("elevation_dot_ref = (%f) %lf deg/s\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("azimuth_sp = (%f) %lf deg\n", tmp,(double)(tmp*57.2958));
  }
}

void HANDLER_BETH_CONTROLLER_TWIST(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BETH_CONTROLLER_TWIST");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("S = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("S_dot = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("U_twt = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("error = %f \n", tmp);
  }
}

void HANDLER_DC_SHOT(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "DC_SHOT");
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("photo_nr = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("utm_east = %d cm\n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("utm_north = %d cm\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("z = %f m\n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("utm_zone = %u \n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("phi = %d decideg\n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("theta = %d decideg\n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("course = %d decideg\n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("speed = %u cm/s\n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("itow = %u ms\n", tmp);
  }
}

void HANDLER_TEST_BOARD_RESULTS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "TEST_BOARD_RESULTS");
/* this message contains a variable length array */
}

void HANDLER_BETH_CONTROLLER_SFB(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BETH_CONTROLLER_SFB");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("one = %f \n", tmp);
  }
}

void HANDLER_TCAS_TA(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "TCAS_TA");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ac_id = %u \n", tmp);
  }
}

void HANDLER_TCAS_RA(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "TCAS_RA");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ac_id = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("resolve = %u \n", tmp);
  }
}

void HANDLER_TCAS_RESOLVED(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "TCAS_RESOLVED");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ac_id = %u \n", tmp);
  }
}

void HANDLER_TCAS_DEBUG(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "TCAS_DEBUG");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ac_id = %u \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("tau = %f \n", tmp);
  }
}

void HANDLER_POTENTIAL(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "POTENTIAL");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("east = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("north = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("alt = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("speed = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("climb = %f \n", tmp);
  }
}

void HANDLER_VERTICAL_ENERGY(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "VERTICAL_ENERGY");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("Epot_err = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("Ekin_err = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("Etot_err = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("Edis_err = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("throttle = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("nav_pitch = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("speed_sp = %f \n", tmp);
  }
}

void HANDLER_STAB_ATTITUDE_FLOAT(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "STAB_ATTITUDE_FLOAT");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("est_p = (%f) %lf degres/s\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("est_q = (%f) %lf degres/s\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("est_r = (%f) %lf degres/s\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("est_phi = (%f) %lf degres\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("est_theta = (%f) %lf degres\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("est_psi = (%f) %lf degres\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ref_phi = (%f) %lf degres\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ref_theta = (%f) %lf degres\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ref_psi = (%f) %lf degres\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("sum_err_phi = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("sum_err_theta = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("sum_err_psi = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("delta_a_fb = (%f) %lf motor\n", tmp,(double)(tmp*1.53e-05));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("delta_e_fb = (%f) %lf motor\n", tmp,(double)(tmp*1.53e-05));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("delta_r_fb = (%f) %lf motor\n", tmp,(double)(tmp*1.53e-05));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("delta_a_ff = (%f) %lf motor\n", tmp,(double)(tmp*1.53e-05));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("delta_e_ff = (%f) %lf motor\n", tmp,(double)(tmp*1.53e-05));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("delta_r_ff = (%f) %lf motor\n", tmp,(double)(tmp*1.53e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("delta_a = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("delta_e = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("delta_r = %d \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("est_p_d = (%f) %lf degres/s^2\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("est_q_d = (%f) %lf degres/s^2\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("est_r_d = (%f) %lf degres/s^2\n", tmp,(double)(tmp*57.2958));
  }
}

void HANDLER_BOOZ2_GYRO(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BOOZ2_GYRO");
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("gp = (%d) %lf deg/s\n", tmp,(double)(tmp*0.013988));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("gq = (%d) %lf deg/s\n", tmp,(double)(tmp*0.013988));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("gr = (%d) %lf deg/s\n", tmp,(double)(tmp*0.013988));
  }
}

void HANDLER_BOOZ2_ACCEL(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BOOZ2_ACCEL");
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ax = (%d) %lf m/s2\n", tmp,(double)(tmp*0.0009766));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ay = (%d) %lf m/s2\n", tmp,(double)(tmp*0.0009766));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("az = (%d) %lf m/s2\n", tmp,(double)(tmp*0.0009766));
  }
}

void HANDLER_BOOZ2_MAG(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BOOZ2_MAG");
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("mx = (%d) %lf 1\n", tmp,(double)(tmp*0.0004883));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("my = (%d) %lf 1\n", tmp,(double)(tmp*0.0004883));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("mz = (%d) %lf 1\n", tmp,(double)(tmp*0.0004883));
  }
}

void HANDLER_FILTER(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "FILTER");
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("phi = (%d) %lf degres\n", tmp,(double)(tmp*0.013988));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("theta = (%d) %lf degres\n", tmp,(double)(tmp*0.013988));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("psi = (%d) %lf degres\n", tmp,(double)(tmp*0.013988));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("measure_phi = (%d) %lf degres\n", tmp,(double)(tmp*2.73e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("measure_theta = (%d) %lf degres\n", tmp,(double)(tmp*2.73e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("measure_psi = (%d) %lf degres\n", tmp,(double)(tmp*2.73e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("corrected_phi = (%d) %lf degres\n", tmp,(double)(tmp*2.73e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("corrected_theta = (%d) %lf degres\n", tmp,(double)(tmp*2.73e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("corrected_psi = (%d) %lf degres\n", tmp,(double)(tmp*2.73e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("correction_phi = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("correction_theta = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("correction_psi = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("bp = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("bq = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("br = %d \n", tmp);
  }
}

void HANDLER_FILTER2(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "FILTER2");
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("px = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("py = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("pz = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("gsx = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("gsy = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("gsz = %d \n", tmp);
  }
}

void HANDLER_RATE_LOOP(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "RATE_LOOP");
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("sp_p = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("sp_q = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("sp_r = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ref_p = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ref_q = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ref_r = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("refdot_p = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("refdot_q = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("refdot_r = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("sumerr_p = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("sumerr_q = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("sumerr_r = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ff_p = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ff_q = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ff_r = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("fb_p = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("fb_q = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("fb_r = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("delta_t = %d \n", tmp);
  }
}

void HANDLER_FILTER_ALIGNER(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "FILTER_ALIGNER");
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("lp_gp = (%d) %lf degres/s\n", tmp,(double)(tmp*0.013988));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("lp_gq = (%d) %lf degres/s\n", tmp,(double)(tmp*0.013988));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("lp_gr = (%d) %lf degres/s\n", tmp,(double)(tmp*0.013988));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("gp = (%d) %lf degres/s\n", tmp,(double)(tmp*0.013988));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("gq = (%d) %lf degres/s\n", tmp,(double)(tmp*0.013988));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("gr = (%d) %lf degres/s\n", tmp,(double)(tmp*0.013988));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("noise = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("cnt = %d \n", tmp);
  }
}

void HANDLER_FILTER_Q(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "FILTER_Q");
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("qi = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("qx = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("qy = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("qz = %d \n", tmp);
  }
}

void HANDLER_FILTER_COR(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "FILTER_COR");
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("mphi = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("mtheta = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("mpsi = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("qi = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("qx = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("qy = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("qz = %d \n", tmp);
  }
}

void HANDLER_STAB_ATTITUDE_INT(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "STAB_ATTITUDE_INT");
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("est_p = (%d) %lf degres/s\n", tmp,(double)(tmp*0.013988));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("est_q = (%d) %lf degres/s\n", tmp,(double)(tmp*0.013988));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("est_r = (%d) %lf degres/s\n", tmp,(double)(tmp*0.013988));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("est_phi = (%d) %lf degres\n", tmp,(double)(tmp*0.013988));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("est_theta = (%d) %lf degres\n", tmp,(double)(tmp*0.013988));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("est_psi = (%d) %lf degres\n", tmp,(double)(tmp*0.013988));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("sp_phi = (%d) %lf degres\n", tmp,(double)(tmp*5.46e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("sp_theta = (%d) %lf degres\n", tmp,(double)(tmp*5.46e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("sp_psi = (%d) %lf degres\n", tmp,(double)(tmp*5.46e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("sum_err_phi = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("sum_err_theta = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("sum_err_psi = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("delta_a_fb = (%d) %lf \n", tmp,(double)(tmp*1.53e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("delta_e_fb = (%d) %lf \n", tmp,(double)(tmp*1.53e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("delta_r_fb = (%d) %lf \n", tmp,(double)(tmp*1.53e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("delta_a_ff = (%d) %lf \n", tmp,(double)(tmp*1.53e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("delta_e_ff = (%d) %lf \n", tmp,(double)(tmp*1.53e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("delta_r_ff = (%d) %lf \n", tmp,(double)(tmp*1.53e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("delta_a = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("delta_e = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("delta_r = %d \n", tmp);
  }
}

void HANDLER_STAB_ATTITUDE_REF_INT(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "STAB_ATTITUDE_REF_INT");
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("sp_phi = (%d) %lf degres\n", tmp,(double)(tmp*5.46e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("sp_theta = (%d) %lf degres\n", tmp,(double)(tmp*5.46e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("sp_psi = (%d) %lf degres\n", tmp,(double)(tmp*5.46e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ref_phi = (%d) %lf degres\n", tmp,(double)(tmp*5.46e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ref_theta = (%d) %lf degres\n", tmp,(double)(tmp*5.46e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ref_psi = (%d) %lf degres\n", tmp,(double)(tmp*5.46e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ref_p = (%d) %lf degres/s\n", tmp,(double)(tmp*0.0008743));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ref_q = (%d) %lf degres/s\n", tmp,(double)(tmp*0.0008743));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ref_r = (%d) %lf degres/s\n", tmp,(double)(tmp*0.0008743));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ref_pd = (%d) %lf degres/s2\n", tmp,(double)(tmp*0.013988));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ref_qd = (%d) %lf degres/s2\n", tmp,(double)(tmp*0.013988));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ref_rd = (%d) %lf degres/s2\n", tmp,(double)(tmp*0.013988));
  }
}

void HANDLER_STAB_ATTITUDE_REF_FLOAT(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "STAB_ATTITUDE_REF_FLOAT");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("sp_phi = (%f) %lf degres\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("sp_theta = (%f) %lf degres\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("sp_psi = (%f) %lf degres\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ref_phi = (%f) %lf degres\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ref_theta = (%f) %lf degres\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ref_psi = (%f) %lf degres\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ref_p = (%f) %lf degres/s\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ref_q = (%f) %lf degres/s\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ref_r = (%f) %lf degres/s\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ref_pd = (%f) %lf degres/s2\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ref_qd = (%f) %lf degres/s2\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ref_rd = (%f) %lf degres/s2\n", tmp,(double)(tmp*57.2958));
  }
}

void HANDLER_BOOZ2_CMD(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BOOZ2_CMD");
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("cmd_roll = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("cmd_pitch = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("cmd_yaw = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("cmd_thrust = %d \n", tmp);
  }
}

void HANDLER_GUIDANCE(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "GUIDANCE");
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("pos_n = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("pos_e = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("sp_pos_n = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("sp_pos_e = %d \n", tmp);
  }
}

void HANDLER_VERT_LOOP(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "VERT_LOOP");
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("z_sp = (%d) %lf m\n", tmp,(double)(tmp*0.0039063));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("zd_sp = (%d) %lf m\n", tmp,(double)(tmp*1.9e-06));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("est_z = (%d) %lf m\n", tmp,(double)(tmp*0.0039063));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("est_zd = (%d) %lf m/s\n", tmp,(double)(tmp*1.9e-06));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("est_zdd = (%d) %lf m/s2\n", tmp,(double)(tmp*0.0009766));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ref_z = (%d) %lf m\n", tmp,(double)(tmp*0.0039063));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ref_zd = (%d) %lf m/s\n", tmp,(double)(tmp*1.9e-06));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ref_zdd = (%d) %lf m/s2\n", tmp,(double)(tmp*0.0009766));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("adp_inv_m = (%d) %lf foo\n", tmp,(double)(tmp*3.8e-06));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("adp_cov = (%d) %lf foo\n", tmp,(double)(tmp*3.8e-06));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("adp_meas = (%d) %lf foo\n", tmp,(double)(tmp*3.8e-06));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("sum_err = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ff_cmd = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("fb_cmd = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("delta_t = %d \n", tmp);
  }
}

void HANDLER_HOVER_LOOP(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "HOVER_LOOP");
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("sp_x = (%d) %lf m\n", tmp,(double)(tmp*0.0039063));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("sp_y = (%d) %lf m\n", tmp,(double)(tmp*0.0039063));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("est_x = (%d) %lf m\n", tmp,(double)(tmp*0.0039063));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("est_y = (%d) %lf m\n", tmp,(double)(tmp*0.0039063));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("est_xd = (%d) %lf m/s\n", tmp,(double)(tmp*1.9e-06));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("est_yd = (%d) %lf m/s\n", tmp,(double)(tmp*1.9e-06));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("est_xdd = (%d) %lf m/s2\n", tmp,(double)(tmp*0.0009765));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("est_ydd = (%d) %lf m/s2\n", tmp,(double)(tmp*0.0009765));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("err_x = (%d) %lf m\n", tmp,(double)(tmp*0.0039063));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("err_y = (%d) %lf m\n", tmp,(double)(tmp*0.0039063));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("err_xd = (%d) %lf m/s\n", tmp,(double)(tmp*1.9e-06));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("err_yd = (%d) %lf m/s\n", tmp,(double)(tmp*1.9e-06));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("err_sum_x = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("err_sum_y = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("err_nav_x = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("err_nav_y = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("cmd_x = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("cmd_y = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("cmd_phi = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("cmd_theta = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("cmd_psi = %d \n", tmp);
  }
}

void HANDLER_BOOZ2_FP(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BOOZ2_FP");
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("east = (%d) %lf m\n", tmp,(double)(tmp*0.0039063));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("north = (%d) %lf m\n", tmp,(double)(tmp*0.0039063));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("up = (%d) %lf m\n", tmp,(double)(tmp*0.0039063));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("veast = (%d) %lf m/s\n", tmp,(double)(tmp*1.9e-06));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("vnorth = (%d) %lf m/s\n", tmp,(double)(tmp*1.9e-06));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("vup = (%d) %lf m/s\n", tmp,(double)(tmp*1.9e-06));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("phi = (%d) %lf degres\n", tmp,(double)(tmp*0.013988));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("theta = (%d) %lf degres\n", tmp,(double)(tmp*0.013988));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("psi = (%d) %lf degres\n", tmp,(double)(tmp*0.013988));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("carrot_east = (%d) %lf m\n", tmp,(double)(tmp*0.0039063));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("carrot_north = (%d) %lf m\n", tmp,(double)(tmp*0.0039063));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("carrot_up = (%d) %lf m\n", tmp,(double)(tmp*0.0039063));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("carrot_psi = (%d) %lf degres\n", tmp,(double)(tmp*5.46e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("thrust = %d \n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("flight_time = %u s\n", tmp);
  }
}

void HANDLER_BOOZ2_FMS_INFO(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BOOZ2_FMS_INFO");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("tbd = %f \n", tmp);
  }
}

void HANDLER_GUIDANCE_H_REF_INT(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "GUIDANCE_H_REF_INT");
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("sp_x = (%d) %lf m\n", tmp,(double)(tmp*0.0039063));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ref_x = (%d) %lf m\n", tmp,(double)(tmp*0.0039063));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ref_xd = (%d) %lf m/s\n", tmp,(double)(tmp*1.9e-06));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ref_xdd = (%d) %lf m/s2\n", tmp,(double)(tmp*0.0009766));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("sp_y = (%d) %lf m\n", tmp,(double)(tmp*0.0039063));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ref_y = (%d) %lf m\n", tmp,(double)(tmp*0.0039063));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ref_yd = (%d) %lf m/s\n", tmp,(double)(tmp*1.9e-06));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ref_ydd = (%d) %lf m/s2\n", tmp,(double)(tmp*0.0009766));
  }
}

void HANDLER_BOOZ2_TUNE_HOVER(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BOOZ2_TUNE_HOVER");
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("rc_roll = (%d) %lf -100/100\n", tmp,(double)(tmp*0.010417));
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("rc_pitch = (%d) %lf -100/100\n", tmp,(double)(tmp*0.010417));
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("rc_yaw = (%d) %lf -100/100\n", tmp,(double)(tmp*0.010417));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("cmd_roll = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("cmd_pitch = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("cmd_yaw = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("cmd_thrust = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("imu_phi = (%d) %lf degres\n", tmp,(double)(tmp*0.013988));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("imu_theta = (%d) %lf degres\n", tmp,(double)(tmp*0.013988));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("imu_psi = (%d) %lf degres\n", tmp,(double)(tmp*0.013988));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("body_phi = (%d) %lf degres\n", tmp,(double)(tmp*0.013988));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("body_theta = (%d) %lf degres\n", tmp,(double)(tmp*0.013988));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("body_psi = (%d) %lf degres\n", tmp,(double)(tmp*0.013988));
  }
}

void HANDLER_INS_Z(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "INS_Z");
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("baro_alt = (%d) %lf m\n", tmp,(double)(tmp*0.0039063));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ins_z = (%d) %lf m\n", tmp,(double)(tmp*0.0039063));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ins_zd = (%d) %lf m/s\n", tmp,(double)(tmp*1.9e-06));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ins_zdd = (%d) %lf m/s2\n", tmp,(double)(tmp*0.0009766));
  }
}

void HANDLER_INS_REF(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "INS_REF");
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ecef_x0 = (%d) %lf m\n", tmp,(double)(tmp*0.01));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ecef_y0 = (%d) %lf m\n", tmp,(double)(tmp*0.01));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ecef_z0 = (%d) %lf m\n", tmp,(double)(tmp*0.01));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("lat0 = (%d) %lf deg\n", tmp,(double)(tmp*1e-07));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("lon0 = (%d) %lf deg\n", tmp,(double)(tmp*1e-07));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("alt0 = (%d) %lf m\n", tmp,(double)(tmp*0.01));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("hmsl0 = (%d) %lf m\n", tmp,(double)(tmp*0.01));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("baro_qfe = %d \n", tmp);
  }
}

void HANDLER_BOOZ2_GPS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BOOZ2_GPS");
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ecef_x = (%d) %lf m\n", tmp,(double)(tmp*0.01));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ecef_y = (%d) %lf m\n", tmp,(double)(tmp*0.01));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ecef_z = (%d) %lf m\n", tmp,(double)(tmp*0.01));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("lat = (%d) %lf deg\n", tmp,(double)(tmp*1e-07));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("lon = (%d) %lf deg\n", tmp,(double)(tmp*1e-07));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("alt = (%d) %lf m\n", tmp,(double)(tmp*0.01));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ecef_xd = (%d) %lf m/s\n", tmp,(double)(tmp*0.01));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ecef_yd = (%d) %lf m/s\n", tmp,(double)(tmp*0.01));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ecef_zd = (%d) %lf m/s\n", tmp,(double)(tmp*0.01));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("pacc = (%d) %lf m\n", tmp,(double)(tmp*0.01));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("sacc = (%d) %lf m/s\n", tmp,(double)(tmp*0.01));
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("tow = %u \n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("pdop = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("numsv = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("fix = %u \n", tmp);
  }
}

void HANDLER_BOOZ2_AHRS_EULER(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BOOZ2_AHRS_EULER");
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("imu_phi = (%d) %lf degres\n", tmp,(double)(tmp*0.013988));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("imu_theta = (%d) %lf degres\n", tmp,(double)(tmp*0.013988));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("imu_psi = (%d) %lf degres\n", tmp,(double)(tmp*0.013988));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("body_phi = (%d) %lf degres\n", tmp,(double)(tmp*0.013988));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("body_theta = (%d) %lf degres\n", tmp,(double)(tmp*0.013988));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("body_psi = (%d) %lf degres\n", tmp,(double)(tmp*0.013988));
  }
}

void HANDLER_BOOZ2_AHRS_QUAT(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BOOZ2_AHRS_QUAT");
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("imu_qi = (%d) %lf \n", tmp,(double)(tmp*3.05e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("imu_qx = (%d) %lf \n", tmp,(double)(tmp*3.05e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("imu_qy = (%d) %lf \n", tmp,(double)(tmp*3.05e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("imu_qz = (%d) %lf \n", tmp,(double)(tmp*3.05e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("body_qi = (%d) %lf \n", tmp,(double)(tmp*3.05e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("body_qx = (%d) %lf \n", tmp,(double)(tmp*3.05e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("body_qy = (%d) %lf \n", tmp,(double)(tmp*3.05e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("body_qz = (%d) %lf \n", tmp,(double)(tmp*3.05e-05));
  }
}

void HANDLER_BOOZ2_AHRS_RMAT(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BOOZ2_AHRS_RMAT");
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("imu_m00 = (%d) %lf \n", tmp,(double)(tmp*6.1e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("imu_m01 = (%d) %lf \n", tmp,(double)(tmp*6.1e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("imu_m02 = (%d) %lf \n", tmp,(double)(tmp*6.1e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("imu_m10 = (%d) %lf \n", tmp,(double)(tmp*6.1e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("imu_m11 = (%d) %lf \n", tmp,(double)(tmp*6.1e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("imu_m12 = (%d) %lf \n", tmp,(double)(tmp*6.1e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("imu_m20 = (%d) %lf \n", tmp,(double)(tmp*6.1e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("imu_m21 = (%d) %lf \n", tmp,(double)(tmp*6.1e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("imu_m22 = (%d) %lf \n", tmp,(double)(tmp*6.1e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("body_m00 = (%d) %lf \n", tmp,(double)(tmp*6.1e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("body_m01 = (%d) %lf \n", tmp,(double)(tmp*6.1e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("body_m02 = (%d) %lf \n", tmp,(double)(tmp*6.1e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("body_m10 = (%d) %lf \n", tmp,(double)(tmp*6.1e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("body_m11 = (%d) %lf \n", tmp,(double)(tmp*6.1e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("body_m12 = (%d) %lf \n", tmp,(double)(tmp*6.1e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("body_m20 = (%d) %lf \n", tmp,(double)(tmp*6.1e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("body_m21 = (%d) %lf \n", tmp,(double)(tmp*6.1e-05));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("body_m22 = (%d) %lf \n", tmp,(double)(tmp*6.1e-05));
  }
}

void HANDLER_ROTORCRAFT_NAV_STATUS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "ROTORCRAFT_NAV_STATUS");
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("block_time = %u s\n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("stage_time = %u s\n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("cur_block = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("cur_stage = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("horizontal_mode = %u \n", tmp);
  }
}

void HANDLER_BOOZ2_RADIO_CONTROL(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BOOZ2_RADIO_CONTROL");
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("roll = %d pprz\n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("pitch = %d pprz\n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("yaw = %d pprz\n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("throttle = %d pprz\n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("mode = %d pprz\n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("kill = %d pprz\n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("status = %u \n", tmp);
  }
}

void HANDLER_BOOZ_BARO_RAW(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BOOZ_BARO_RAW");
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("offset = %u \n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("value = %u \n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("value_filtered = %u \n", tmp);
  }
}

void HANDLER_VFF(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "VFF");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("measure = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("z = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("zd = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("bias = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("Pzz = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("Pzdzd = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("Pbb = %f \n", tmp);
  }
}

void HANDLER_BOOZ2_TUNE_FF(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BOOZ2_TUNE_FF");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("fb_rms = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("dg = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("g = %f \n", tmp);
  }
}

void HANDLER_HFF(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "HFF");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("x = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("y = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("xd = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("yd = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("xdd = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ydd = %f \n", tmp);
  }
}

void HANDLER_HFF_DBG(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "HFF_DBG");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("x_measure = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("y_measure = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("yd_measure = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("xd_measure = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("Pxx = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("Pyy = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("Pxdxd = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("Pydyd = %f \n", tmp);
  }
}

void HANDLER_HFF_GPS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "HFF_GPS");
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("lag_cnt = %u \n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("lag_cnt_err = %d \n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("save_cnt = %d \n", tmp);
  }
}

void HANDLER_BOOZ2_SONAR(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BOOZ2_SONAR");
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("front = %u adc\n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("back = %u adc\n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("right = %u adc\n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("left = %u adc\n", tmp);
  }
}

void HANDLER_BOOZ2_CAM(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BOOZ2_CAM");
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("tilt = %d us\n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("pan = (%d 2^12rad) %lf degres\n", tmp,(double)(tmp*0.013988));
  }
}

void HANDLER_BOOZ2_AHRS_REF_QUAT(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BOOZ2_AHRS_REF_QUAT");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ref_qi = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ref_qx = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ref_qy = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ref_qz = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("body_qi = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("body_qx = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("body_qy = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("body_qz = %f \n", tmp);
  }
}

void HANDLER_EKF7_XHAT(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "EKF7_XHAT");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("c = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("s1 = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("s2 = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("s3 = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("p = (%f) %lf deg/s\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("q = (%f) %lf deg/s\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("r = (%f) %lf deg/s\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("bp = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("bq = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("br = %f \n", tmp);
  }
}

void HANDLER_EKF7_Y(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "EKF7_Y");
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("timecount = %u \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("g1 = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("g2 = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("g3 = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("m1 = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("m2 = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("m3 = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("p = (%f) %lf deg/s\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("q = (%f) %lf deg/s\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("r = (%f) %lf deg/s\n", tmp,(double)(tmp*57.2958));
  }
}

void HANDLER_EKF7_P_DIAG(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "EKF7_P_DIAG");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("c = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("s1 = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("s2 = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("s3 = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("p = (%f) %lf deg^2/s^2\n", tmp,(double)(tmp*3283));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("q = (%f) %lf deg^2/s^2\n", tmp,(double)(tmp*3283));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("r = (%f) %lf deg^2/s^2\n", tmp,(double)(tmp*3283));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("bp = (%f) %lf deg^2/s^2\n", tmp,(double)(tmp*3283));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("bq = (%f) %lf deg^2/s^2\n", tmp,(double)(tmp*3283));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("br = (%f) %lf deg^2/s^2\n", tmp,(double)(tmp*3283));
  }
}

void HANDLER_AHRS_EULER(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "AHRS_EULER");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("phi = (%f rad) %lf deg\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("theta = (%f rad) %lf deg\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("psi = (%f rad) %lf deg\n", tmp,(double)(tmp*57.2958));
  }
}

void HANDLER_AHRS_MEASUREMENT_EULER(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "AHRS_MEASUREMENT_EULER");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("phi = (%f rad) %lf deg\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("theta = (%f rad) %lf deg\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("psi = (%f rad) %lf deg\n", tmp,(double)(tmp*57.2958));
  }
}

void HANDLER_WT(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "WT");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("rpm = %f \n", tmp);
  }
}

void HANDLER_CSC_CAN_DEBUG(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "CSC_CAN_DEBUG");
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("err_nb = %u \n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("err_code = %u \n", tmp);
  }
}

void HANDLER_CSC_CAN_MSG(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "CSC_CAN_MSG");
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("frame = %u \n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("id = %u \n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("data_a = %u \n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("data_b = %u \n", tmp);
  }
}

void HANDLER_FMS_TIME(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "FMS_TIME");
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("tv_sec = %u \n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("tv_nsec = %u \n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("delay_ns = %u \n", tmp);
  }
}

void HANDLER_LOADCELL(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "LOADCELL");
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("load = %d \n", tmp);
  }
}

void HANDLER_FLA_DEBUG(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "FLA_DEBUG");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("past_input = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("imu_rate = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("desired_accel = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("motor_command = %f \n", tmp);
  }
}

void HANDLER_BLMC_FAULT_STATUS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BLMC_FAULT_STATUS");
/* this message contains a variable length array */
}

void HANDLER_BLMC_SPEEDS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BLMC_SPEEDS");
/* this message contains a variable length array */
}

void HANDLER_AHRS_DEBUG_QUAT(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "AHRS_DEBUG_QUAT");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("jqi = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("jqx = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("jqy = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("jqz = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("xqi = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("xqx = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("xqy = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("xqz = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("mqi = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("mqx = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("mqy = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("mqz = %f \n", tmp);
  }
}

void HANDLER_BLMC_BUSVOLTS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BLMC_BUSVOLTS");
/* this message contains a variable length array */
}

void HANDLER_SYSTEM_STATUS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "SYSTEM_STATUS");
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("csc1_loop_count = %u \n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("csc1_msg_count = %u \n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("csc2_loop_count = %u \n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("csc2_msg_count = %u \n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("can_rx_err = %u \n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("can_tx_err = %u \n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("rc_parser_err = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("system_fault = %u \n", tmp);
  }
}

void HANDLER_DYNAMIXEL(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "DYNAMIXEL");
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("left_wing = %u \n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("right_wing = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("left_wing_flag = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("right_wing_flag = %u \n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("invalid_position = %u \n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("timeout_events = %u \n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("checksum_errors = %u \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("fuse_rotation_angle = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("fuse_rotation_rate = %f \n", tmp);
  }
}

void HANDLER_RMAT_DEBUG(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "RMAT_DEBUG");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("a = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("b = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("c = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("d = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("e = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("f = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("g = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("h = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("i = %f \n", tmp);
  }
}

void HANDLER_SIMPLE_COMMANDS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "SIMPLE_COMMANDS");
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("roll = %d \n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("pitch = %d \n", tmp);
  }
  {
     short tmp;
     memcpy(&tmp, data + offset, sizeof(short));
     offset += sizeof(short);
     printf("yaw = %d \n", tmp);
  }
}

void HANDLER_VANE_SENSOR(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "VANE_SENSOR");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("alpha = (%f rad) %lf deg\n", tmp,(double)(tmp*57.3));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("alpha_filtered = (%f rad) %lf deg\n", tmp,(double)(tmp*57.3));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("alpha_target = (%f rad) %lf deg\n", tmp,(double)(tmp*57.3));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("alpha_vane_error = (%f rad) %lf deg\n", tmp,(double)(tmp*57.3));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("alpha2 = (%f rad) %lf deg\n", tmp,(double)(tmp*57.3));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("beta = (%f rad) %lf deg\n", tmp,(double)(tmp*57.3));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("beta_filtered = (%f rad) %lf deg\n", tmp,(double)(tmp*57.3));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("beta_target = (%f rad) %lf deg\n", tmp,(double)(tmp*57.3));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("beta_vane_error = (%f rad) %lf deg\n", tmp,(double)(tmp*57.3));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("beta2 = (%f rad) %lf deg\n", tmp,(double)(tmp*57.3));
  }
}

void HANDLER_CONTROLLER_GAINS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "CONTROLLER_GAINS");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("roll_gamma_p = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("roll_gamma_d = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("roll_gamma_i = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("pitch_gamma_p = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("pitch_gamma_d = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("pitch_gamma_i = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("yaw_gamma_p = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("yaw_gamma_d = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("yaw_gamma_i = %f \n", tmp);
  }
}

void HANDLER_AHRS_LKF(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "AHRS_LKF");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("phi = (%f rad) %lf degres\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("theta = (%f rad) %lf degres\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("psi = (%f rad) %lf degres\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("qi = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("qx = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("qy = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("qz = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("p = (%f rad/s) %lf degres/s\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("q = (%f rad/s) %lf degres/s\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("r = (%f rad/s) %lf degres/s\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ax = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ay = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("az = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("mx = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("my = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("mz = %f \n", tmp);
  }
}

void HANDLER_AHRS_LKF_DEBUG(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "AHRS_LKF_DEBUG");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("phi_err = (%f rad) %lf degres\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("theta_err = (%f rad) %lf degres\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("psi_err = (%f rad) %lf degres\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("bp = (%f rad/s) %lf degres/s\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("bq = (%f rad/s) %lf degres/s\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("br = (%f rad/s) %lf degres/s\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("quat_norm = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("phi_accel = (%f rad) %lf degres\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("theta_accel = (%f rad) %lf degres\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("phi_cov = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("theta_cov = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("psi_cov = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("bp_cov = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("bq_cov = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("br_cov = %f \n", tmp);
  }
}

void HANDLER_AHRS_LKF_ACC_DBG(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "AHRS_LKF_ACC_DBG");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("qi_err = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("qx_err = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("qy_err = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("qz_err = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("bp_err = (%f rad/s) %lf degres/s\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("bq_err = (%f rad/s) %lf degres/s\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("br_err = (%f rad/s) %lf degres/s\n", tmp,(double)(tmp*57.2958));
  }
}

void HANDLER_AHRS_LKF_MAG_DBG(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "AHRS_LKF_MAG_DBG");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("qi_err = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("qx_err = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("qy_err = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("qz_err = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("bp_err = (%f rad/s) %lf degres/s\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("bq_err = (%f rad/s) %lf degres/s\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("br_err = (%f rad/s) %lf degres/s\n", tmp,(double)(tmp*57.2958));
  }
}

void HANDLER_BOOZ_SIM_SENSORS_SCALED(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BOOZ_SIM_SENSORS_SCALED");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("acc_x = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("acc_y = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("acc_z = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("mag_x = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("mag_y = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("mag_z = %f \n", tmp);
  }
}

void HANDLER_INS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "INS");
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ins_x = (%d) %lf m\n", tmp,(double)(tmp*0.0039063));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ins_y = (%d) %lf m\n", tmp,(double)(tmp*0.0039063));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ins_z = (%d) %lf m\n", tmp,(double)(tmp*0.0039063));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ins_xd = (%d) %lf m/s\n", tmp,(double)(tmp*1.9e-06));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ins_yd = (%d) %lf m/s\n", tmp,(double)(tmp*1.9e-06));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ins_zd = (%d) %lf m/s\n", tmp,(double)(tmp*1.9e-06));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ins_xdd = (%d) %lf m/s2\n", tmp,(double)(tmp*0.0009766));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ins_ydd = (%d) %lf m/s2\n", tmp,(double)(tmp*0.0009766));
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ins_zdd = (%d) %lf m/s2\n", tmp,(double)(tmp*0.0009766));
  }
}

void HANDLER_GPS_ERROR(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "GPS_ERROR");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("x_position = %f m\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("y_position = %f m\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("z_position = %f m\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("x_velocity = %f m\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("y_velocity = %f m\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("z_velocity = %f m\n", tmp);
  }
}

void HANDLER_IMU_GYRO(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "IMU_GYRO");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("gp = (%f rad/s) %lf deg/s\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("gq = (%f rad/s) %lf deg/s\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("gr = (%f rad/s) %lf deg/s\n", tmp,(double)(tmp*57.2958));
  }
}

void HANDLER_IMU_MAG(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "IMU_MAG");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("mx = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("my = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("mz = %f \n", tmp);
  }
}

void HANDLER_IMU_ACCEL(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "IMU_ACCEL");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ax = %f m/s-2\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ay = %f m/s-2\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("az = %f m/s-2\n", tmp);
  }
}

void HANDLER_IMU_GYRO_RAW(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "IMU_GYRO_RAW");
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("gp = %d adc\n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("gq = %d adc\n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("gr = %d adc\n", tmp);
  }
}

void HANDLER_IMU_ACCEL_RAW(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "IMU_ACCEL_RAW");
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ax = %d adc\n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("ay = %d adc\n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("az = %d adc\n", tmp);
  }
}

void HANDLER_IMU_MAG_RAW(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "IMU_MAG_RAW");
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("mx = %d adc\n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("my = %d adc\n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("mz = %d adc\n", tmp);
  }
}

void HANDLER_IMU_GYRO_LP(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "IMU_GYRO_LP");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("gp = %f rad/s\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("gq = %f rad/s\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("gr = %f rad/s\n", tmp);
  }
}

void HANDLER_IMU_PRESSURE(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "IMU_PRESSURE");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("p = %f pascal\n", tmp);
  }
}

void HANDLER_IMU_HS_GYRO(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "IMU_HS_GYRO");
/* this message contains a variable length array */
}

void HANDLER_TEST_PASSTHROUGH_STATUS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "TEST_PASSTHROUGH_STATUS");
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("io_proc_msg_cnt = %u \n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("io_proc_err_cnt = %u \n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("io_link_msg_cnt = %u \n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("io_link_err_cnt = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("rc_status = %u \n", tmp);
  }
}

void HANDLER_IMU_TURNTABLE(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "IMU_TURNTABLE");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("omega = (%f rad/s) %lf deg/s\n", tmp,(double)(tmp*57.2958));
  }
}

void HANDLER_BARO_RAW(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BARO_RAW");
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("abs = %d \n", tmp);
  }
  {
     int tmp;
     memcpy(&tmp, data + offset, sizeof(int));
     offset += sizeof(int);
     printf("diff = %d \n", tmp);
  }
}

void HANDLER_TIME(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "TIME");
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("t = %u \n", tmp);
  }
}

void HANDLER_ROTORCRAFT_STATUS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "ROTORCRAFT_STATUS");
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("link_imu_nb_err = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("blmc_nb_err = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("rc_status = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("gps_status = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ap_mode = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ap_in_flight = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ap_motors_on = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ap_h_mode = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ap_v_mode = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("vsupply = %u decivolt\n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("cpu_time = %u s\n", tmp);
  }
}

void HANDLER_OPTICFLOW(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "OPTICFLOW");
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("flow = %u \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ref_alt = %f \n", tmp);
  }
}

void HANDLER_VISUALTARGET(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "VISUALTARGET");
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("x = %u \n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("y = %u \n", tmp);
  }
}

void HANDLER_BOOZ_SIM_RPMS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BOOZ_SIM_RPMS");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("front = %f RPM\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("back = %f RPM\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("right = %f RPM\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("left = %f RPM\n", tmp);
  }
}

void HANDLER_BOOZ_SIM_SPEED_POS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BOOZ_SIM_SPEED_POS");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ltpp_xdd = %f m/s2\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ltpp_ydd = %f m/s2\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ltpp_zdd = %f m/s2\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ltpp_xd = %f m/s\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ltpp_yd = %f m/s\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ltpp_zd = %f m/s\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ltpp_x = %f m\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ltpp_y = %f m\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ltpp_z = %f m\n", tmp);
  }
}

void HANDLER_BOOZ_SIM_RATE_ATTITUDE(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BOOZ_SIM_RATE_ATTITUDE");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("p = %f degres/s\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("q = %f degres/s\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("r = %f degres/s\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("phi = %f degres\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("theta = %f degres\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("psi = %f degres\n", tmp);
  }
}

void HANDLER_BOOZ_SIM_GYRO_BIAS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BOOZ_SIM_GYRO_BIAS");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("bp = %f degres/s\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("bq = %f degres/s\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("br = %f degres/s\n", tmp);
  }
}

void HANDLER_BOOZ_SIM_RANGE_METER(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BOOZ_SIM_RANGE_METER");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("dist = %f adc\n", tmp);
  }
}

void HANDLER_BOOZ_SIM_WIND(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BOOZ_SIM_WIND");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("vx = %f m/s\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("vy = %f m/s\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("vz = %f m/s\n", tmp);
  }
}

void HANDLER_BOOZ_DEBUG_FOO(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BOOZ_DEBUG_FOO");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("ami_stat = %u \n", tmp);
  }
}

void HANDLER_BOOZ_MAX1167_ERR(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BOOZ_MAX1167_ERR");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("erno = %u \n", tmp);
  }
}

void HANDLER_PPRZ_DEBUG(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "PPRZ_DEBUG");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("module = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("errno = %u \n", tmp);
  }
}

void HANDLER_BOOZ_SIM_ACCEL_LTP(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BOOZ_SIM_ACCEL_LTP");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("xdd = %f m/s2\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("ydd = %f m/s2\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("zdd = %f m/s2\n", tmp);
  }
}

void HANDLER_LOOSE_INS_GPS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "LOOSE_INS_GPS");
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("status = %u \n", tmp);
  }
  {
     double tmp;
     memcpy(&tmp, data + offset, sizeof(double));
     offset += sizeof(double);
     printf("time_running = (%lf) %lf minutes\n", tmp,(double)(tmp*0.016667));
  }
  {
     double tmp;
     memcpy(&tmp, data + offset, sizeof(double));
     offset += sizeof(double);
     printf("q0 = %lf \n", tmp);
  }
  {
     double tmp;
     memcpy(&tmp, data + offset, sizeof(double));
     offset += sizeof(double);
     printf("q1 = %lf \n", tmp);
  }
  {
     double tmp;
     memcpy(&tmp, data + offset, sizeof(double));
     offset += sizeof(double);
     printf("q2 = %lf \n", tmp);
  }
  {
     double tmp;
     memcpy(&tmp, data + offset, sizeof(double));
     offset += sizeof(double);
     printf("q3 = %lf \n", tmp);
  }
  {
     double tmp;
     memcpy(&tmp, data + offset, sizeof(double));
     offset += sizeof(double);
     printf("phi = (%lf) %lf deg\n", tmp,(double)(tmp*57.2958));
  }
  {
     double tmp;
     memcpy(&tmp, data + offset, sizeof(double));
     offset += sizeof(double);
     printf("theta = (%lf) %lf deg\n", tmp,(double)(tmp*57.2958));
  }
  {
     double tmp;
     memcpy(&tmp, data + offset, sizeof(double));
     offset += sizeof(double);
     printf("psi = (%lf) %lf deg\n", tmp,(double)(tmp*57.2958));
  }
  {
     double tmp;
     memcpy(&tmp, data + offset, sizeof(double));
     offset += sizeof(double);
     printf("north = %lf m\n", tmp);
  }
  {
     double tmp;
     memcpy(&tmp, data + offset, sizeof(double));
     offset += sizeof(double);
     printf("east = %lf m\n", tmp);
  }
  {
     double tmp;
     memcpy(&tmp, data + offset, sizeof(double));
     offset += sizeof(double);
     printf("down = %lf m\n", tmp);
  }
  {
     double tmp;
     memcpy(&tmp, data + offset, sizeof(double));
     offset += sizeof(double);
     printf("v_north = %lf m/s\n", tmp);
  }
  {
     double tmp;
     memcpy(&tmp, data + offset, sizeof(double));
     offset += sizeof(double);
     printf("v_east = %lf m/s\n", tmp);
  }
  {
     double tmp;
     memcpy(&tmp, data + offset, sizeof(double));
     offset += sizeof(double);
     printf("v_down = %lf m/s\n", tmp);
  }
  {
     double tmp;
     memcpy(&tmp, data + offset, sizeof(double));
     offset += sizeof(double);
     printf("est_p = (%lf) %lf degres/s\n", tmp,(double)(tmp*57.2958));
  }
  {
     double tmp;
     memcpy(&tmp, data + offset, sizeof(double));
     offset += sizeof(double);
     printf("est_q = (%lf) %lf degres/s\n", tmp,(double)(tmp*57.2958));
  }
  {
     double tmp;
     memcpy(&tmp, data + offset, sizeof(double));
     offset += sizeof(double);
     printf("est_r = (%lf) %lf degres/s\n", tmp,(double)(tmp*57.2958));
  }
  {
     double tmp;
     memcpy(&tmp, data + offset, sizeof(double));
     offset += sizeof(double);
     printf("gyroBias_x = (%lf) %lf degres/s\n", tmp,(double)(tmp*57.2958));
  }
  {
     double tmp;
     memcpy(&tmp, data + offset, sizeof(double));
     offset += sizeof(double);
     printf("gyroBias_y = (%lf) %lf degres/s\n", tmp,(double)(tmp*57.2958));
  }
  {
     double tmp;
     memcpy(&tmp, data + offset, sizeof(double));
     offset += sizeof(double);
     printf("gyroBias_z = (%lf) %lf degres/s\n", tmp,(double)(tmp*57.2958));
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("imuCallbacks = %u \n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("gpsCallbacks = %u \n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("baroCallbacks = %u \n", tmp);
  }
}

void HANDLER_AFL_COEFFS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "AFL_COEFFS");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("roll_a = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("roll_b = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("roll_c = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("pitch_a = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("pitch_b = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("pitch_c = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("yaw_a = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("yaw_b = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("yaw_c = %f \n", tmp);
  }
}

void HANDLER_BOOZ_ATT_REF_MODEL(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BOOZ_ATT_REF_MODEL");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("omega_p = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("zeta_p = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("omega_q = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("zeta_q = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("omega_r = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("zeta_r = %f \n", tmp);
  }
}

void HANDLER_BOOZ2_FF_ADAP(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "BOOZ2_FF_ADAP");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("roll = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("pitch = %f \n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("yaw = %f \n", tmp);
  }
}

void HANDLER_I2C_ERRORS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "I2C_ERRORS");
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("acknowledge_failure_cnt = %u \n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("misplaced_start_or_stop_cnt = %u \n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("arbitration_lost_cnt = %u \n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("overrun_or_underrun_cnt = %u \n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("pec_error_in_reception_cnt = %u \n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("timeout_or_tlow_error_cnt = %u \n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("smbus_alert_cnt = %u \n", tmp);
  }
  {
     unsigned short tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned short));
     offset += sizeof(unsigned short);
     printf("unexpected_event_cnt = %u \n", tmp);
  }
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("last_unexpected_event = %u \n", tmp);
  }
}

void HANDLER_RDYB_TRAJECTORY(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "RDYB_TRAJECTORY");
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("commanded_phi = (%f rad) %lf deg\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("commanded_theta = (%f rad) %lf deg\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("commanded_psi = (%f rad) %lf deg\n", tmp,(double)(tmp*57.2958));
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("setpoint_x = %f m N\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("setpoint_y = %f m E\n", tmp);
  }
  {
     float tmp;
     memcpy(&tmp, data + offset, sizeof(float));
     offset += sizeof(float);
     printf("setpoint_z = %f m D\n", tmp);
  }
}

void HANDLER_HENRY_GNSS(unsigned char * data, unsigned char len)
{
  unsigned char offset = 0;
  printf("MESSAGE = %s\n", "HENRY_GNSS");
  {
     unsigned int tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned int));
     offset += sizeof(unsigned int);
     printf("last_imu_update = %u \n", tmp);
  }
  {
     double tmp;
     memcpy(&tmp, data + offset, sizeof(double));
     offset += sizeof(double);
     printf("GPS_time = %lf \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("GPS_solution_valid = %u \n", tmp);
  }
  {
     double tmp;
     memcpy(&tmp, data + offset, sizeof(double));
     offset += sizeof(double);
     printf("latitude = (%lf rad) %lf deg\n", tmp,(double)(tmp*57.2958));
  }
  {
     double tmp;
     memcpy(&tmp, data + offset, sizeof(double));
     offset += sizeof(double);
     printf("longitude = (%lf rad) %lf deg\n", tmp,(double)(tmp*57.2958));
  }
  {
     double tmp;
     memcpy(&tmp, data + offset, sizeof(double));
     offset += sizeof(double);
     printf("altitude = %lf \n", tmp);
  }
  {
     double tmp;
     memcpy(&tmp, data + offset, sizeof(double));
     offset += sizeof(double);
     printf("North = %lf \n", tmp);
  }
  {
     double tmp;
     memcpy(&tmp, data + offset, sizeof(double));
     offset += sizeof(double);
     printf("East = %lf \n", tmp);
  }
  {
     double tmp;
     memcpy(&tmp, data + offset, sizeof(double));
     offset += sizeof(double);
     printf("Down = %lf \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("SVs_Tracked = %u \n", tmp);
  }
  {
     unsigned char tmp;
     memcpy(&tmp, data + offset, sizeof(unsigned char));
     offset += sizeof(unsigned char);
     printf("SVs_PVT = %u \n", tmp);
  }
  {
     double tmp;
     memcpy(&tmp, data + offset, sizeof(double));
     offset += sizeof(double);
     printf("V_North = %lf \n", tmp);
  }
  {
     double tmp;
     memcpy(&tmp, data + offset, sizeof(double));
     offset += sizeof(double);
     printf("V_East = %lf \n", tmp);
  }
  {
     double tmp;
     memcpy(&tmp, data + offset, sizeof(double));
     offset += sizeof(double);
     printf("V_Down = %lf \n", tmp);
  }
}

typedef void (*ptrHandler)(unsigned char *, unsigned char len);
ptrHandler funcArray[256] = {
HANDLER_DEFAULT,
HANDLER_BOOT,
HANDLER_ALIVE,
HANDLER_PONG,
HANDLER_TAKEOFF,
HANDLER_DebugChao,
HANDLER_ATTITUDE,
HANDLER_IR_SENSORS,
HANDLER_GPS,
HANDLER_NAVIGATION_REF,
HANDLER_NAVIGATION,
HANDLER_PPRZ_MODE,
HANDLER_BAT,
HANDLER_DEBUG_MCU_LINK,
HANDLER_CALIBRATION,
HANDLER_SETTINGS,
HANDLER_DESIRED,
HANDLER_GPS_SOL,
HANDLER_ADC_GENERIC,
HANDLER_TEST_FORMAT,
HANDLER_CAM,
HANDLER_CIRCLE,
HANDLER_SEGMENT,
HANDLER_DOWNLINK_STATUS,
HANDLER_MODEM_STATUS,
HANDLER_SVINFO,
HANDLER_DEBUG,
HANDLER_SURVEY,
HANDLER_WC_RSSI,
HANDLER_RANGEFINDER,
HANDLER_DOWNLINK,
HANDLER_DL_VALUE,
HANDLER_MARK,
HANDLER_SYS_MON,
HANDLER_MOTOR,
HANDLER_WP_MOVED,
HANDLER_GYRO_RATES,
HANDLER_ENERGY,
HANDLER_BARO_BMP85_CALIB,
HANDLER_BARO_BMP85,
HANDLER_SPEED_LOOP,
HANDLER_ALT_KALMAN,
HANDLER_ESTIMATOR,
HANDLER_TUNE_ROLL,
HANDLER_BARO_MS5534A,
HANDLER_PRESSURE,
HANDLER_BARO_WORDS,
HANDLER_WP_MOVED_LLA,
HANDLER_CHRONO,
HANDLER_WP_MOVED_ENU,
HANDLER_WINDTURBINE_STATUS_,
HANDLER_RC_3CH_,
HANDLER_MPPT,
HANDLER_DEBUG_IR_I2C,
HANDLER_AIRSPEED,
HANDLER_XSENS,
HANDLER_BARO_ETS,
HANDLER_AIRSPEED_ETS,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_H_CTL_A,
HANDLER_TURB_PRESSURE_RAW,
HANDLER_TURB_PRESSURE_VOLTAGE,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_VF_UPDATE,
HANDLER_VF_PREDICT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_CROSS_TRACK_ERROR,
HANDLER_ESTIMATOR_COMP_FILTER,
HANDLER_FORMATION_SLOT_TM,
HANDLER_FORMATION_STATUS_TM,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_WIND_INFO_RET,
HANDLER_SCP_STATUS,
HANDLER_SHT_STATUS,
HANDLER_ENOSE_STATUS,
HANDLER_DPICCO_STATUS,
HANDLER_ANTENNA_DEBUG,
HANDLER_ANTENNA_STATUS,
HANDLER_MOTOR_BENCH_STATUS,
HANDLER_MOTOR_BENCH_STATIC,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_PPM,
HANDLER_RC,
HANDLER_COMMANDS,
HANDLER_FBW_STATUS,
HANDLER_ADC,
HANDLER_ACTUATORS,
HANDLER_BETH,
HANDLER_BETH_ESTIMATOR,
HANDLER_BETH_CONTROLLER,
HANDLER_BETH_CONTROLLER_TWIST,
HANDLER_DC_SHOT,
HANDLER_TEST_BOARD_RESULTS,
HANDLER_BETH_CONTROLLER_SFB,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_TCAS_TA,
HANDLER_TCAS_RA,
HANDLER_TCAS_RESOLVED,
HANDLER_TCAS_DEBUG,
HANDLER_POTENTIAL,
HANDLER_VERTICAL_ENERGY,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_STAB_ATTITUDE_FLOAT,
HANDLER_BOOZ2_GYRO,
HANDLER_BOOZ2_ACCEL,
HANDLER_BOOZ2_MAG,
HANDLER_FILTER,
HANDLER_FILTER2,
HANDLER_RATE_LOOP,
HANDLER_FILTER_ALIGNER,
HANDLER_FILTER_Q,
HANDLER_FILTER_COR,
HANDLER_STAB_ATTITUDE_INT,
HANDLER_STAB_ATTITUDE_REF_INT,
HANDLER_STAB_ATTITUDE_REF_FLOAT,
HANDLER_BOOZ2_CMD,
HANDLER_GUIDANCE,
HANDLER_VERT_LOOP,
HANDLER_HOVER_LOOP,
HANDLER_BOOZ2_FP,
HANDLER_BOOZ2_FMS_INFO,
HANDLER_GUIDANCE_H_REF_INT,
HANDLER_BOOZ2_TUNE_HOVER,
HANDLER_INS_Z,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_INS_REF,
HANDLER_BOOZ2_GPS,
HANDLER_BOOZ2_AHRS_EULER,
HANDLER_BOOZ2_AHRS_QUAT,
HANDLER_BOOZ2_AHRS_RMAT,
HANDLER_ROTORCRAFT_NAV_STATUS,
HANDLER_BOOZ2_RADIO_CONTROL,
HANDLER_BOOZ_BARO_RAW,
HANDLER_VFF,
HANDLER_BOOZ2_TUNE_FF,
HANDLER_HFF,
HANDLER_HFF_DBG,
HANDLER_HFF_GPS,
HANDLER_BOOZ2_SONAR,
HANDLER_BOOZ2_CAM,
HANDLER_BOOZ2_AHRS_REF_QUAT,
HANDLER_EKF7_XHAT,
HANDLER_EKF7_Y,
HANDLER_EKF7_P_DIAG,
HANDLER_AHRS_EULER,
HANDLER_AHRS_MEASUREMENT_EULER,
HANDLER_WT,
HANDLER_CSC_CAN_DEBUG,
HANDLER_CSC_CAN_MSG,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_FMS_TIME,
HANDLER_LOADCELL,
HANDLER_FLA_DEBUG,
HANDLER_BLMC_FAULT_STATUS,
HANDLER_BLMC_SPEEDS,
HANDLER_AHRS_DEBUG_QUAT,
HANDLER_BLMC_BUSVOLTS,
HANDLER_SYSTEM_STATUS,
HANDLER_DYNAMIXEL,
HANDLER_RMAT_DEBUG,
HANDLER_SIMPLE_COMMANDS,
HANDLER_VANE_SENSOR,
HANDLER_CONTROLLER_GAINS,
HANDLER_AHRS_LKF,
HANDLER_AHRS_LKF_DEBUG,
HANDLER_AHRS_LKF_ACC_DBG,
HANDLER_AHRS_LKF_MAG_DBG,
HANDLER_BOOZ_SIM_SENSORS_SCALED,
HANDLER_INS,
HANDLER_GPS_ERROR,
HANDLER_IMU_GYRO,
HANDLER_IMU_MAG,
HANDLER_IMU_ACCEL,
HANDLER_IMU_GYRO_RAW,
HANDLER_IMU_ACCEL_RAW,
HANDLER_IMU_MAG_RAW,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_IMU_GYRO_LP,
HANDLER_IMU_PRESSURE,
HANDLER_IMU_HS_GYRO,
HANDLER_TEST_PASSTHROUGH_STATUS,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_IMU_TURNTABLE,
HANDLER_BARO_RAW,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_TIME,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_ROTORCRAFT_STATUS,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_OPTICFLOW,
HANDLER_VISUALTARGET,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_DEFAULT,
HANDLER_BOOZ_SIM_RPMS,
HANDLER_BOOZ_SIM_SPEED_POS,
HANDLER_BOOZ_SIM_RATE_ATTITUDE,
HANDLER_BOOZ_SIM_GYRO_BIAS,
HANDLER_BOOZ_SIM_RANGE_METER,
HANDLER_BOOZ_SIM_WIND,
HANDLER_BOOZ_DEBUG_FOO,
HANDLER_BOOZ_MAX1167_ERR,
HANDLER_PPRZ_DEBUG,
HANDLER_BOOZ_SIM_ACCEL_LTP,
HANDLER_LOOSE_INS_GPS,
HANDLER_AFL_COEFFS,
HANDLER_BOOZ_ATT_REF_MODEL,
HANDLER_BOOZ2_FF_ADAP,
HANDLER_I2C_ERRORS,
HANDLER_RDYB_TRAJECTORY,
HANDLER_HENRY_GNSS
};
